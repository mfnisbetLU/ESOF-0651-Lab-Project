// Copyright (C) 2022  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "11/28/2022 18:15:55"
                                                                                
// Verilog Test Bench template for design : controller
// 
// Simulation tool : Questa Intel FPGA (Verilog)
// 

`timescale 1 ps/ 1 ps
module controller_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg flag;
reg [3:0] op;
// wires                                               
wire [1:0]  branchSel;
wire dmwe;
wire [3:0]  outop;
wire outwe;
wire portSel;
wire [3:0]  rfwe;
wire wbSel;

// assign statements (if any)                          
controller i1 (
// port map - connection between master ports and signals/registers   
	.branchSel(branchSel),
	.dmwe(dmwe),
	.flag(flag),
	.op(op),
	.outop(outop),
	.outwe(outwe),
	.portSel(portSel),
	.rfwe(rfwe),
	.wbSel(wbSel)
);
initial                                                
begin 
flag=0;                                                 
op=0;
#10000 op=1;
#10000 op=2;
#10000 op=3;
#10000 op=4;
#10000 op=5;
#10000 op=6;
#10000 op=7;
#10000 op=8;
#10000 op=9; 
#10000 op=10; 
#10000 flag=1;
#10000 op=11;
#10000 op=12;
#10000 op=13;
#10000 op=14;
#10000 op=15;  
#10000;                                                                  
end                                                                                                    
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
                                                                                                    
// --> end                                             
end                                                    
endmodule

