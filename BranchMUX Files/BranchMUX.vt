// Copyright (C) 2016  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "11/25/2022 12:00:32"
                                                                                
// Verilog Test Bench template for design : BranchMUX
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ps/ 1 ps
module BranchMUX_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg [7:0] LR_r;
reg [7:0] PCadd2;
reg [7:0] ea;
reg [1:0] sel;
// wires                                               
wire [7:0]  address;

// assign statements (if any)                          
BranchMUX i1 (
// port map - connection between master ports and signals/registers   
	.LR_r(LR_r),
	.PCadd2(PCadd2),
	.address(address),
	.ea(ea),
	.sel(sel)
);
initial                                                
begin                                                  
LR_r=1;
PCadd2=2;
ea=3;
sel=0;
#10000 sel=1;
#10000 sel=2;
#10000 sel=3;
#10000;                                                                  
end                                                    

// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
                                                                                                    
// --> end                                             
end                                                    
endmodule

